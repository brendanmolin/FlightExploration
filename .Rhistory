V(g)$label = NA
# Edge
E(g)$weight <- log(as.numeric(E(g)$index))
E(g)$width <- as.numeric(E(g)$weight)/max(as.numeric(E(g)$weight))
E(g)$arrow.size <- .01
rbPal <- colorRampPalette(c('gainsboro','black'))
E(g)$color <- rbPal(10)[as.numeric(cut(as.numeric(E(g)$weight),breaks = 10))]
#layout1 <- layout.fruchterman.reingold(g)
# Plot
plot.igraph(g, main = paste("Network Of Airports Sending Trips of", wmin, "Passengers or More"))
legend('bottomright',legend=levels(as.factor(V(g)$member)),col=as.integer(V(g)$color),pch=16)
E(g)$color
V(g)$color
palette()
palette()[V(g)$member + 1]
palette()
V(g)$color = palette()[V(g)$member + 1]
legend('bottomright',legend=levels(as.factor(V(g)$member)),col=V(g)$color,pch=16)
plot.igraph(g, main = paste("Network Of Airports Sending Trips of", wmin, "Passengers or More"))
legend('bottomright',legend=levels(as.factor(V(g)$member)),col=V(g)$color,pch=16)
V(g)$size = max(10*as.numeric(V(g)$btw)/max(as.numeric(V(g)$btw)),3)
plot.igraph(g, main = paste("Network Of Airports Sending Trips of", wmin, "Passengers or More"))
for (i in 0:6) {
wmin <- 10^i
# Remove edges not meeting the condition and then remove isolated vertices
g <- g0
g <- delete.edges(g, which(E(g)$index < wmin))
g <- delete.vertices(g,which(degree(g) < 1))
# Vertex
V(g)$btw <- betweenness(g)
V(g)$size = max(10*as.numeric(V(g)$btw)/max(as.numeric(V(g)$btw)),3)
V(g)$color = palette()[V(g)$member + 1]
#  V(g)$label.cex = 0
V(g)$label = NA
# Edge
E(g)$weight <- log(as.numeric(E(g)$index))
E(g)$width <- as.numeric(E(g)$weight)/max(as.numeric(E(g)$weight))
E(g)$arrow.size <- .01
rbPal <- colorRampPalette(c('gainsboro','black'))
E(g)$color <- rbPal(10)[as.numeric(cut(as.numeric(E(g)$weight),breaks = 10))]
#layout1 <- layout.fruchterman.reingold(g)
# Plot
plot.igraph(g, main = paste("Network Of Airports Sending Trips of", wmin, "Passengers or More"))
plot(g)
}
max(10*as.numeric(V(g)$btw)/max(as.numeric(V(g)$btw)),3)
V(g)$btw
as.numeric(V(g)$btw)/max(as.numeric(V(g)$btw))
V(g)$size = 10*as.numeric(V(g)$btw)/max(as.numeric(V(g)$btw))
V(g)$size = 3 + 6*as.numeric(V(g)$btw)/max(as.numeric(V(g)$btw))
V(g)$size
V(g)$label.cex = as.integer(V(g)$size)-1
V(g)$label.cex
length(V(g)member
knitr::opts_chunk$set(echo = TRUE)
# Directory
setwd("C:/Users/bmolin/Documents/GitProject/Flights/")
# Libraries
library(ggplot2)
library(lattice)
library(ggmap)
library(OpenStreetMap)
library(igraph)
library(geosphere)
### Import Data
# Flights data
### This has to be manually downloaded from here: https://www.transtats.bts.gov/DL_SelectFields.asp?Table_ID=258
### This analysis was based on 2016 as of November 2016 with the following fields marked:
# Passengers
# Unique Carrier
# Unique Carrier Name
# OriginAirportID
# Origin
# DestAirportID
# Dest
# Month
flights_raw <- read.csv("140897895_T_T100D_MARKET_US_CARRIER_ONLY.csv")
flights <- flights_raw
airports_raw <- read.csv("140897895_T_MASTER_CORD.csv")
airports_raw$X <- NULL # Scrap column
airports <- airports_raw
airports <- airports[airports$AIRPORT_ID %in% append(flights$ORIGIN_AIRPORT_ID, flights$DEST_AIRPORT_ID),]
airports <- airports[airports$AIRPORT_IS_LATEST == 1,]
# Restrict airports to United States less territories
airports <- airports[airports$LATITUDE > 12 & airports$LONGITUDE < -20,]
flights <- flights[flights$ORIGIN_AIRPORT_ID %in% airports$AIRPORT_ID &
flights$DEST_AIRPORT_ID %in% airports$AIRPORT_ID, ]
airports$Name <- flights[match(airports$AIRPORT_ID, flights$ORIGIN_AIRPORT_ID),"ORIGIN"]
# Frequency Distribution of # Of Passengers
layout(matrix(1:2, ncol=2))
hist(flights$PASSENGERS, main = "Histogram of Flight Size", sub = "All Flights", xlab = "PASSENGERS")
hist(flights[flights$PASSENGERS <= 100, "PASSENGERS"], main = "Histogram of Flight Size", sub = "Flights Under 100 Passengers", xlab = "PASSENGERS")
zeroflights <- sum(flights$PASSENGERS == 0)
print(paste("There are", zeroflights, "flight connections that have no passengers"))
flights <- flights[flights$PASSENGERS != 0,]
# Over Time
passengers_monthly <- aggregate(PASSENGERS ~ MONTH, data = flights, sum)
p <- ggplot(aes(x = MONTH, y = PASSENGERS/1000000), data = passengers_monthly) + geom_line()
p + ggtitle("Number of Passengers Flying by Month of Year") + labs(y="Passengers (in millions)")
# Top Carriers
carriers_rank <- aggregate(PASSENGERS ~ UNIQUE_CARRIER_NAME, data = flights, sum)
carriers_rank$rank <- rank(-carriers_rank$PASSENGERS)
carriers_rank <- carriers_rank[order(carriers_rank$rank),]
row.names(carriers_rank) <- NULL
head(carriers_rank)
p <- ggplot(aes(x = reorder(UNIQUE_CARRIER_NAME, -PASSENGERS), y = PASSENGERS),
data = carriers_rank[carriers_rank$rank <= 20,]) + geom_bar(stat = 'identity')
p <- p + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Top Carriers by Passengers") + labs(x="Carrier")
# Top Carriers by Month
carriers_rank_month <- aggregate(PASSENGERS ~ UNIQUE_CARRIER_NAME + MONTH, data = flights, sum)
monthlymax <- aggregate(PASSENGERS ~ UNIQUE_CARRIER_NAME, data = carriers_rank_month, max)
monthlymax <- within(monthlymax, quartile <- as.integer(cut(PASSENGERS, quantile(PASSENGERS, probs=0:4/4), include.lowest=TRUE)))
carriers_rank_month$quartile <- monthlymax[match(carriers_rank_month$UNIQUE_CARRIER_NAME, monthlymax$UNIQUE_CARRIER_NAME),"quartile"]
layout(matrix(1:4, ncol=2, nrow = 2))
for (i in 1:4) {
chartname <- paste0('Carriers by Month Quartile ', i)
print(lattice::xyplot(PASSENGERS ~ MONTH | UNIQUE_CARRIER_NAME,
data = carriers_rank_month[carriers_rank_month$quartile == i,],
type = 'l',
par.strip.text=list(cex=.5),
layout=c(4,7),
main = chartname))
}
# Distance between flights
origin_coordinates <- airports[match(flights$ORIGIN_AIRPORT_ID, airports$AIRPORT_ID), c("LONGITUDE", "LATITUDE")]
colnames(origin_coordinates) <- c("OLongitude", "OLatitude")
dest_coordinates <- airports[match(flights$DEST_AIRPORT_ID, airports$AIRPORT_ID), c("LONGITUDE", "LATITUDE")]
colnames(dest_coordinates) <- c("DLongitude", "DLatitude")
flights <- cbind(flights, origin_coordinates)
flights <- cbind(flights, dest_coordinates)
flights$distance <- with(flights, distHaversine(cbind(OLongitude, OLatitude), cbind(DLongitude, DLatitude), r=3959)) # In miles
hist(flights$distance/100, main = "Histogram of Flight Connections by Distance", breaks = 100, xlab = "Distance in Miles * 100")
dist_traveled <- aggregate(PASSENGERS ~ floor(distance/100), data = flights, sum)
colnames(dist_traveled) <- c("distance", "PASSENGERS")
p <- ggplot(aes(x = distance, y = PASSENGERS), data = dist_traveled) + geom_bar(stat = 'identity')
p + ggtitle("Histogram of Passenger Miles Traveled") + labs(x = "Distance in Miles * 100")
shortflights_state <- as.data.frame(table(airports[airports$Name %in% flights[flights$distance < 100, "ORIGIN"],"AIRPORT_STATE_NAME"]))
colnames(shortflights_state) <- c("State", "Connections")
p <- ggplot(aes(x = State, y = Connections), data = shortflights_state[shortflights_state$Connections != 0,]) + geom_bar(stat = 'identity')
p + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Number of Flight Connections Under 100 Miles by Origin State")
## Mapping
# Map all the airports
# Define Map parameters
bbox2 <- make_bbox(airports$LONGITUDE, airports$LATITUDE, f = .00001)
# Create Map
map <- openmap(c(bbox2[4], bbox2[1]), c(bbox2[2], bbox2[3]), type = "esri")
map <- openproj(map)
# All Airports
# Plot
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE),
data = airports,
alpha = 0.8,
size = 0.5
) + ggtitle("Airports in the USA")
p
p0 + stat_density2d(
aes(x = LONGITUDE, y = LATITUDE, fill = ..level.., alpha = ..level..),
bins = 6, data = airports,
geom = "polygon"
) + ggtitle("Density of Airports in the USA")
# Adjust by # Of Passengers
passengers_out <- aggregate(PASSENGERS ~ ORIGIN_AIRPORT_ID, data = flights, sum)
passengers_out_airports <- merge(passengers_out, airports, by.x = 'ORIGIN_AIRPORT_ID', by.y = 'AIRPORT_ID')
passengers_out_airports <- passengers_out_airports[passengers_out_airports$PASSENGERS != 0,]
passengers_out_airports$PASSENGERS <- log(passengers_out_airports$PASSENGERS)
passengers_out_airports_long <- passengers_out_airports[rep(row.names(passengers_out_airports), passengers_out_airports$PASSENGERS), c(1,3:14)]
p0 + stat_density2d(
aes(x = LONGITUDE, y = LATITUDE, fill = ..level.., alpha = ..level..),
bins = 6, data = passengers_out_airports_long,
geom = "polygon"
) + ggtitle("Density of Travelers by Origin Airport")
## PLOT NETWORKS
# Create Network data
networks <- aggregate(PASSENGERS ~ ORIGIN + DEST, data = flights, sum)
networks <- networks[as.character(networks$ORIGIN) != as.character(networks$DEST),]
colnames(networks) <- c("Source", "Target", "weight")
edges <- as.matrix(networks)
g0 <- graph.data.frame(cbind(edges, attr), directed=TRUE)
## Layout
# Community
comm <- walktrap.community(g0)
membership <- membership(comm)
V(g0)$member <- membership
E(g0)$index <- E(g0)$weight
palette(rainbow(44))
for (i in 0:6) {
wmin <- 10^i
# Remove edges not meeting the condition and then remove isolated vertices
g <- g0
g <- delete.edges(g, which(E(g)$index < wmin))
g <- delete.vertices(g,which(degree(g) < 1))
# Vertex
V(g)$btw <- betweenness(g)
V(g)$size = 3 + 6*as.numeric(V(g)$btw)/max(as.numeric(V(g)$btw))
V(g)$color = palette()[V(g)$member + 1]
V(g)$frame.color = NA
V(g)$label.cex = .25
V(g)$label = ifelse(length(V(g)$label) < 30, V(g)$name, NA)
# Edge
E(g)$weight <- log(as.numeric(E(g)$index))
E(g)$width <- as.numeric(E(g)$weight)/max(as.numeric(E(g)$weight))
E(g)$arrow.size <- .01
rbPal <- colorRampPalette(c('gainsboro','black'))
E(g)$color <- rbPal(10)[as.numeric(cut(as.numeric(E(g)$weight),breaks = 10))]
#layout1 <- layout.fruchterman.reingold(g)
# Plot
plot.igraph(g, main = paste("Network Of Airports Sending Trips of", wmin, "Passengers or More"))
if(length(V(g)$member) < 20) legend('bottomright',legend=levels(as.factor(V(g)$member)),col=V(g)$color,pch=16)
}
# Community Analysis
members <- as.data.frame(table(membership))
loners <- sum(members$Freq == 1)
print(paste("There are", loners, "Airports That Don't Belong to a Community"))
# 475 Airports not placed into a community
members2 <- members[members$Freq != 1,]
ggplot(aes(x = membership, y = Freq), data = members2) + geom_bar(stat = 'identity') + ggtitle("Community Size")
for (i in members[members$Freq != 1,"membership"]) {
mem <- i
# Remove edges not meeting the condition and then remove isolated vertices
g <- g0
g <- delete.vertices(g,which(as.integer(V(g)$member) != mem))
#  g <- delete.edges(g, which(as.integer(V(g)$member) != mem))
# Vertex
V(g)$size = 8
V(g)$color = 'white'
V(g)$frame.color = NA
V(g)$label.cex = .75
# Edge
E(g)$weight <- log(as.numeric(E(g)$index))
E(g)$width <- as.numeric(E(g)$weight)/max(as.numeric(E(g)$weight))
E(g)$arrow.size <- .01
rbPal <- colorRampPalette(c('gainsboro','black'))
E(g)$color <- ifelse(E(g)$weight <= 1, "black", rbPal(10)[as.numeric(cut(as.numeric(E(g)$weight),breaks = 10))])
#layout1 <- layout.fruchterman.reingold(g)
# Plot
plot.igraph(g, main = paste("Network of Community", mem))
}
#
flights$origin_community <- factor(membership[match(flights$ORIGIN, names(membership))])
community_passengers <- aggregate(PASSENGERS ~ origin_community, data = flights, sum)
p <- ggplot(aes(y = PASSENGERS, x = origin_community), data = community_passengers[community_passengers$origin_community %in% members2$membership,]) + geom_bar(stat = 'identity')
p + ggtitle("Number of Passengers sent in a Community")
# Communities 6 and 10 have the most members and drive the most traffic
airports$member <- flights[match(airports$Name, flights$ORIGIN), "origin_community"]
# Community Analysis
members <- as.data.frame(table(membership))
loners <- sum(members$Freq == 1)
print(paste("There are", loners, "Airports That Don't Belong to a Community"))
# 475 Airports not placed into a community
members2 <- members[members$Freq != 1,]
ggplot(aes(x = membership, y = Freq), data = members2) + geom_bar(stat = 'identity') + ggtitle("Community Size")
for (i in members[members$Freq != 1,"membership"]) {
mem <- i
# Remove edges not meeting the condition and then remove isolated vertices
g <- g0
g <- delete.vertices(g,which(as.integer(V(g)$member) != mem))
#  g <- delete.edges(g, which(as.integer(V(g)$member) != mem))
# Vertex
V(g)$size = 8
V(g)$color = 'white'
V(g)$frame.color = NA
V(g)$label.cex = .75
# Edge
E(g)$weight <- log(as.numeric(E(g)$index))
E(g)$width <- as.numeric(E(g)$weight)/max(as.numeric(E(g)$weight))
E(g)$arrow.size <- .01
rbPal <- colorRampPalette(c('gainsboro','black'))
E(g)$color <- ifelse(E(g)$weight <= 1, "black", rbPal(10)[as.numeric(cut(as.numeric(E(g)$weight),breaks = 10))])
#layout1 <- layout.fruchterman.reingold(g)
# Plot
plot.igraph(g, main = paste("Network of Community", mem))
}
#
flights$origin_community <- factor(membership[match(flights$ORIGIN, names(membership))])
community_passengers <- aggregate(PASSENGERS ~ origin_community, data = flights, sum)
p <- ggplot(aes(y = PASSENGERS, x = origin_community), data = community_passengers[community_passengers$origin_community %in% members2$membership,]) + geom_bar(stat = 'identity')
p + ggtitle("Number of Passengers sent in a Community")
# Communities 6 and 10 have the most members and drive the most traffic
airports$member <- flights[match(airports$Name, flights$ORIGIN), "origin_community"]
### Map All Airports in Top Communities
# Plot
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
col = palette()[member+1],
size = 1
) + ggtitle("Map of Communities")
### Map All Airports in Top Communities
# Plot
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
color = palette()[member+1],
size = 1
) + ggtitle("Map of Communities")
### Map All Airports in Top Communities
# Plot
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = palette()[member+1]),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
### Map All Airports in Top Communities
# Plot
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = member),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
### Map Non Community Airports
# Plot
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE),
data = airports[is.na(airports$member),],
alpha = 0.8,
size = 1
) + ggtitle("Map of Non Communities")
p
### Map All Airports in Top Communities
# Plot
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = palette()[member+1]),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
airports$member
airports$member + 1
as.integer(airports$member + 1)
airports$member
as.integer(airports$member) + 1
palette()[as.integer(airports$member)
+ 1]
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = palette()[as.integer(airports$member) + 1]),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = palette()[as.integer(member) + 1]),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, fill = palette()[as.integer(member) + 1]),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = palette()[as.integer(member) + 1]),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
p
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = as.integer(member) + 1),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = member + 1),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities") + scale_color_brewer("rainbow")
p
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = factor(as.integer(member + 1))),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities") + scale_color_brewer("rainbow")
p
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = as.factor(as.integer(member + 1))),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = as.factor(as.integer(member) + 1)),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities") + scale_color_brewer("rainbow")
p
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = as.factor(as.integer(member) + 1)),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities") + scale_color_brewer(palette = "rainbow")
p
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = as.factor(as.integer(member) + 1)),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
### Map All Airports in Top Communities
# Plot
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = member),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
### Map Non Community Airports
# Plot
p0 <- autoplot(map)
# Plot Points
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE),
data = airports[is.na(airports$member),],
alpha = 0.8,
size = 1
) + ggtitle("Map of Non Communities")
p
length(V(g)$label
)
length(V(g)$name
)
i == 1
i = 1
wmin <- 10^i
# Remove edges not meeting the condition and then remove isolated vertices
g <- g0
g <- delete.edges(g, which(E(g)$index < wmin))
g <- delete.vertices(g,which(degree(g) < 1))
# Vertex
V(g)$btw <- betweenness(g)
V(g)$size = 3 + 6*as.numeric(V(g)$btw)/max(as.numeric(V(g)$btw))
V(g)$color = palette()[V(g)$member + 1]
V(g)$frame.color = NA
V(g)$label.cex = .35
length(V(g)$name)
length(V(g)$name) < 30
i >= 5
i >= 5
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = as.factor(as.integer(member) + 1)),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities") + scale_colour_manual(values=cbPalette)
p
p + scale_fill_brewer(palette="Set1")
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = as.factor(as.integer(member) + 1)),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p + scale_fill_brewer(palette="Set1")
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = member),
data = airports[airports$member %in% members2$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p + scale_fill_brewer(palette="Set1")
members
members2
members3 <- members[members$Freq >= 5,]
p <- p0 + geom_point(
aes(x = LONGITUDE, y = LATITUDE, color = member),
data = airports[airports$member %in% members3$membership,],
alpha = 0.8,
size = 1
) + ggtitle("Map of Communities")
p
